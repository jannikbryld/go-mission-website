version: '3.8'

services:
  go-mission-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "80:3000"
    environment:
      - NODE_ENV=production
      - NITRO_HOST=0.0.0.0
      - NITRO_PORT=3000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/"]
      timeout: 10s
      retries: 3
      start_period: 30s
      interval: 30s
    networks:
      - go-mission-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.go-mission.rule=Host(`your-domain.com`)"
      - "traefik.http.routers.go-mission.entrypoints=websecure"
      - "traefik.http.routers.go-mission.tls.certresolver=letsencrypt"
      - "traefik.http.services.go-mission.loadbalancer.server.port=3000"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Optional: Add Traefik for reverse proxy and SSL
  traefik:
    image: traefik:v3.0
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=your-email@example.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - go-mission-network
    restart: unless-stopped

networks:
  go-mission-network:
    driver: bridge 